In object-oriented programming (OOP), upcasting and downcasting are concepts related to type casting.

Upcasting is the process of treating a derived class object as if it were a base class object. Here is an example of upcasting.  upcasting prevents the object to call methods of child class and only base class methods can be called.	

class A {
    void show1() {
        System.out.println("in show A ");
    }
}

class B extends A {
    void show2() {
        System.out.println("in show B ");
    }
}

public class Main {
    public static void main(String[] args) {
        A obj = new B();  // the object 'obj' is of type B but it's reference is of type A and thats fine because B at the end is instance of A. type of obj is A
        A obj = (A) new B()  // Upcasting - Typecasting into parent class
        obj.show1();   
		obj.show2(); // we can't call show2 even the obj is of type B, that's bcuz the reference is of class A
		
		B obj1 = new B() 
			OR
		B obj1 = (B)obj; // b obj1=obj is not possible so we typecasted obj1 to be of type B. This is downcasting. A type ka object the hmne B type me typecast krdia.
		obj1.show2(); // now its possible
    }
}

Downcasting is the process of casting a base class reference back to a derived class reference. This is not always safe and may require explicit casting. If the object being downcast is not actually an instance of the derived class, a ClassCastException will be thrown at runtime.